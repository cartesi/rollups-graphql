name: CI

on: push

permissions:
  contents: write

env:
  ANVIL_TAG: nightly-2cdbfaca634b284084d0f86357623aef7a0d2ce3

jobs:
  build_node_v2:
    name: Build Node v2
    runs-on: ubuntu-latest
    env:
      CARTESI_POSTGRES_ENDPOINT: 'postgres://postgres:password@localhost:5432/rollupsdb?sslmode=disable'
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: rollupsdb
        options: --name postgres
    steps:
      - uses: actions/checkout@v4
      
      - name: Clone Node V2 (avoid submodules)
        run: |
          git clone -b v2.0.0-alpha.1 --depth 1 --recurse-submodules https://github.com/cartesi/rollups-node.git
      
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready";
              exit 0;
            fi;
            sleep 2;
          done;
          echo "PostgreSQL did not become ready in time";
          exit 1;

      - name: Migrate Node V2 DB
        run: |
          cd rollups-node
          eval $(make env)
          make migrate

      - name: Deps and Cartesi Machine
        run: |
          export CARTESI_MACHINE_VERSION=0.18.1
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev lua5.4 libslirp0
          wget https://github.com/cartesi/machine-emulator/releases/download/v${CARTESI_MACHINE_VERSION}/cartesi-machine-v${CARTESI_MACHINE_VERSION}_amd64.deb
          sudo dpkg -i ./cartesi-machine-v${CARTESI_MACHINE_VERSION}_amd64.deb
          rm ./cartesi-machine-v${CARTESI_MACHINE_VERSION}_amd64.deb

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Start devnet (Anvil)
        run: |
          cd rollups-node
          make devnet
          make start-devnet

      - name: Build Node v2 image
        run: |
          docker build -t node_v2 -f ./ci/Dockerfile .

      - name: Start Node v2 image
        run: |
          docker run -d --env-file ./ci/env.nodev2-local \
            --rm --network=host \
            --name c_node_v2 node_v2
          sleep 10

      - name: Debug logs
        run: |
          docker ps
          docker logs --timestamps c_node_v2

      - name: Install Echo App
        run: |
          docker exec c_node_v2 cartesi-rollups-cli app deploy -n echo-dapp -t applications/echo-dapp/ -v

      - name: Send input transaction
        run: |
          ./ci/scripts/send_inputs.sh

      - name: Query Database for Output
        run: |
          MAX_RETRIES=30
          for i in $(seq 1 $MAX_RETRIES); do
            RESULT=$(docker exec -i postgres psql -U postgres -d rollupsdb -t -c "SELECT * FROM public.output;")
            if [[ "$RESULT" =~ "deadbeef" ]]; then
              echo "Result found: $RESULT"
              exit 0
            fi
            echo "Result: $RESULT"
            echo "Waiting for result... attempt $i"
            sleep 5
          done
          echo "Timeout reached: result not found"
          docker logs --timestamps c_espresso
          exit 1

      - name: Dump database
        env:
          PGPASSWORD: password
        run: |
          pg_dump -h localhost -U postgres -d rollupsdb > rollupsdb-dump.sql

      - name: Upload database dump
        uses: actions/upload-artifact@v4
        with:
          name: db-dump
          path: rollupsdb-*

  build:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Clang
        run: sudo apt-get update && sudo apt-get install -y clang

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Lint
        uses: golangci/golangci-lint-action@v6
        with:
          args: --timeout=5m --out-format=colored-line-number
          version: latest

      - name: Check generate
        run: make check-gen

      - name: Build
        run: make build

      - name: Run node v2 database
        run: make up-db-raw

      - name: Test
        run: make test
      
      - name: Generate graphql-db-migration
        run: go build -o graphql-db-migration ./dev/main.go

      - name: Upload graphql-db-migration
        uses: actions/upload-artifact@v4
        with:
          name: migration
          path: graphql-db-migration

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Trim CHANGELOG.md
        run: sed -e '0,/^##[^#]/d' -e '/^##[^#]/,$d' -i CHANGELOG.md

      - name: Download database dump
        uses: actions/download-artifact@v4
        with:
          name: migration

      - name: Publish Github release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          body_path: CHANGELOG.md
          files: |
            graphql-db-migration

  releases-matrix:
    name: Build binaries for release
    runs-on: ubuntu-latest
    needs: [release]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64, riscv64]
        exclude:
          - goarch: arm64
            goos: windows
          - goarch: riscv64
            goos: windows
          - goarch: riscv64
            goos: darwin
    steps:
      - uses: actions/checkout@v4

      - uses: wangyoucao577/go-release-action@v1
        with:
          overwrite: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          extra_files: CHANGELOG.md LICENSE README.md
          binary_name: cartesi-rollups-graphql
