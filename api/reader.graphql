"Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain"
type Proof {
  outputIndex: BigInt!
  outputHashesSiblings: [String]!
}

enum CompletionStatus {
  UNPROCESSED
  ACCEPTED
  REJECTED
  EXCEPTION
  MACHINE_HALTED
  CYCLE_LIMIT_EXCEEDED
  TIME_LIMIT_EXCEEDED
  PAYLOAD_LENGTH_LIMIT_EXCEEDED
}

"Request submitted to the application to advance its state"
type Input {
  "id of the input"
  id: String!
  "Input index starting from genesis"
  index: Int!
  "Status of the input"
  status: CompletionStatus!
  "Address responsible for submitting the input"
  msgSender: String!
  "Timestamp associated with the input submission, as defined by the base layer's block in which it was recorded"
  timestamp: BigInt! @deprecated(reason: "Use `blockTimestamp` instead")
  "Number of the base layer block in which the input was recorded"
  blockNumber: BigInt!
  "Input payload in Ethereum hex binary format, starting with '0x'"
  payload: String!
  # "Get a voucher from this particular input given the voucher's index"
  # voucher(index: Int!): Voucher!
  # "Get a notice from this particular input given the notice's index"
  # notice(index: Int!): Notice!
  # "Get a report from this particular input given the report's index"
  # report(index: Int!): Report!
  "Get vouchers from this particular input with support for pagination"
  vouchers(first: Int, last: Int, after: String, before: String): VoucherConnection!
  delegateCallVouchers(first: Int, last: Int, after: String, before: String): DelegateCallVoucherConnection!
  "Get notices from this particular input with support for pagination"
  notices(first: Int, last: Int, after: String, before: String): NoticeConnection!
  "Get reports from this particular input with support for pagination"
  reports(first: Int, last: Int, after: String, before: String): ReportConnection!
  "Timestamp associated with the Espresso input submission"
  espressoTimestamp: String @deprecated(reason: "Will be removed")
  "Number of the Espresso block in which the input was recorded"
  espressoBlockNumber: String @deprecated(reason: "Will be removed")
  "Input index in the Input Box"
  inputBoxIndex: String

  blockTimestamp: BigInt

  prevRandao: String

  "The application that produced the input"
  application: Application!

  "Get applications associated with the input with support for pagination"
  applications(first: Int, last: Int, after: String, before: String): AppConnection!
}

type Application {
  "Application ID"
  id: String!
  "Application name"
  name: String!
  "Application Address"
  address: String!
}

"Representation of a transaction that can be carried out on the base layer blockchain, such as a transfer of assets"
type Voucher {
  "Voucher index within the context of the input that produced it"
  index: Int!
  "Input whose processing produced the voucher"
  input: Input!
  "Transaction destination address in Ethereum hex binary format (20 bytes), starting with '0x'"
  destination: String!
  "Transaction payload in Ethereum hex binary format, starting with '0x'"
  payload: String!
  "Proof object that allows this voucher to be validated and executed on the base layer blockchain"
  proof: Proof

  value: BigInt

  "Indicates whether the voucher has been executed on the base layer blockchain"
  executed: Boolean

  "The hash of executed transaction"
  transactionHash: String

  "The application that produced the voucher"
  application: Application!
}

type DelegateCallVoucher {
  "Voucher index within the context of the input that produced it"
  index: Int!
  "Input whose processing produced the voucher"
  input: Input!
  "Transaction destination address in Ethereum hex binary format (20 bytes), starting with '0x'"
  destination: String!
  "Transaction payload in Ethereum hex binary format, starting with '0x'"
  payload: String!
  "Proof object that allows this voucher to be validated and executed on the base layer blockchain"
  proof: Proof

  "Indicates whether the voucher has been executed on the base layer blockchain"
  executed: Boolean

  "The hash of executed transaction"
  transactionHash: String

  "The application that produced the delegateed voucher"
  application: Application!
}

"Top level queries"
type Query {
  "Get input based on its identifier"
  input(id: String!): Input!
  "Get a voucher based on its index"
  voucher(outputIndex: Int!): Voucher!
  delegateCallVoucher(outputIndex: Int!): DelegateCallVoucher!
  "Get a notice based on its index"
  notice(outputIndex: Int!): Notice!
  "Get a report based on its index"
  report(reportIndex: Int!): Report!
  "Get inputs with support for pagination"
  inputs(first: Int, last: Int, after: String, before: String, where: InputFilter): InputConnection!
  "Get vouchers with support for pagination"
  vouchers(first: Int, last: Int, after: String, before: String, filter: [ConvenientFilter]): VoucherConnection!
  delegateCallVouchers(first: Int, last: Int, after: String, before: String, filter: [ConvenientFilter]): DelegateCallVoucherConnection!
  "Get notices with support for pagination"
  notices(first: Int, last: Int, after: String, before: String): NoticeConnection!
  "Get reports with support for pagination"
  reports(first: Int, last: Int, after: String, before: String): ReportConnection!
  "Get apps with support for pagination"
  applications(first: Int, last: Int, after: String, before: String, where: AppFilter): InputConnection!
}

"Pagination entry"
type NoticeEdge {
  "Node instance"
  node: Notice!
  "Pagination cursor"
  cursor: String!
}

"Pagination result"
type InputConnection {
  "Total number of entries that match the query"
  totalCount: Int!
  "Pagination entries returned for the current page"
  edges: [InputEdge!]!
  "Pagination metadata"
  pageInfo: PageInfo!
}

type AppConnection {
  "Total number of entries that match the query"
  totalCount: Int!
  "Pagination entries returned for the current page"
  edges: [AppEdge!]!
  "Pagination metadata"
  pageInfo: PageInfo!
}

type AppEdge {
  "Node instance"
  node: Application!
  "Pagination cursor"
  cursor: String!
}

"Pagination result"
type VoucherConnection {
  "Total number of entries that match the query"
  totalCount: Int!
  "Pagination entries returned for the current page"
  edges: [VoucherEdge!]!
  "Pagination metadata"
  pageInfo: PageInfo!
}

"Pagination result"
type DelegateCallVoucherConnection {
  "Total number of entries that match the query"
  totalCount: Int!
  "Pagination entries returned for the current page"
  edges: [DelegateCallVoucherEdge!]!
  "Pagination metadata"
  pageInfo: PageInfo!
}

"Informational statement that can be validated in the base layer blockchain"
type Notice {
  "Notice index within the context of the input that produced it"
  index: Int!
  "Input whose processing produced the notice"
  input: Input!
  "Notice data as a payload in Ethereum hex binary format, starting with '0x'"
  payload: String!
  "Proof object that allows this notice to be validated by the base layer blockchain"
  proof: Proof

  "The application that produced the notice"
  application: Application!
}

"Pagination entry"
type ReportEdge {
  "Node instance"
  node: Report!
  "Pagination cursor"
  cursor: String!
}

"Pagination result"
type ReportConnection {
  "Total number of entries that match the query"
  totalCount: Int!
  "Pagination entries returned for the current page"
  edges: [ReportEdge!]!
  "Pagination metadata"
  pageInfo: PageInfo!
}

"Filter object to restrict results depending on input properties"
input AppFilter {
  "Filter only inputs with index lower than a given value"
  indexLowerThan: Int
  "Filter only inputs with index greater than a given value"
  indexGreaterThan: Int

  "Filter only apps with name"
  name: String

  "Filter only apps with address"
  address: String
}

"Filter object to restrict results depending on input properties"
input InputFilter {
  "Filter only inputs with index lower than a given value"
  indexLowerThan: Int
  "Filter only inputs with index greater than a given value"
  indexGreaterThan: Int

  "Filter only inputs with the message sender"
  msgSender: String

  "Filter only inputs from 'inputbox' or 'espresso'"
  type: String
}

scalar BigInt

"Pagination result"
type NoticeConnection {
  "Total number of entries that match the query"
  totalCount: Int!
  "Pagination entries returned for the current page"
  edges: [NoticeEdge!]!
  "Pagination metadata"
  pageInfo: PageInfo!
}

"Pagination entry"
type InputEdge {
  "Node instance"
  node: Input!
  "Pagination cursor"
  cursor: String!
}

"Page metadata for the cursor-based Connection pagination pattern"
type PageInfo {
  "Cursor pointing to the first entry of the page"
  startCursor: String
  "Cursor pointing to the last entry of the page"
  endCursor: String
  "Indicates if there are additional entries after the end curs"
  hasNextPage: Boolean!
  "Indicates if there are additional entries before the start curs"
  hasPreviousPage: Boolean!
}

"Application log or diagnostic information"
type Report {
  "Report index within the context of the input that produced it"
  index: Int!
  "Input whose processing produced the report"
  input: Input!
  "Report data as a payload in Ethereum hex binary format, starting with '0x'"
  payload: String!

  "The application that produced the report"
  application: Application!
}

"Pagination entry"
type VoucherEdge {
  "Node instance"
  node: Voucher!
  "Pagination cursor"
  cursor: String!
}

type DelegateCallVoucherEdge {
  "Node instance"
  node: DelegateCallVoucher!
  "Pagination cursor"
  cursor: String!
}

schema {
  query: Query
}

input AddressFilterInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]

  # Logical operators
  and: [ConvenientFilter]
  or: [ConvenientFilter]
}

input BooleanFilterInput {
  eq: Boolean
  ne: Boolean

  # Logical operators
  and: [ConvenientFilter]
  or: [ConvenientFilter]
}

input ConvenientFilter {
  destination: AddressFilterInput
  executed: BooleanFilterInput
  # UserData: UserDataFilter

  # Logical operators
  and: [ConvenientFilter]
  or: [ConvenientFilter]
}

# input UserDataFilter {
#   # The field to apply the comparison operation on
#   field: String!

#   # Basic comparison operators
#   eq: String
#   ne: String
#   gt: String
#   gte: String
#   lt: String
#   lte: String

#   # Inclusion/exclusion operators
#   in: [String]
#   nin: [String]

#   # Logical operators
#   and: [ConvenientFilter]
#   or: [ConvenientFilter]
# }
